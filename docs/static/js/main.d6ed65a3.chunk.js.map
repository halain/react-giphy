{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","console","log","key","GifExpertApp","defautCategory","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAsB9C,OACI,0BAAMC,SAfW,SAACC,GAClBA,EAAEC,iBAGEJ,EAAWK,OAAOC,QAAQ,IAE1BR,GAAe,SAAAS,GACZ,MAAM,CAAEP,GAAR,mBAAuBO,OAE1BN,EAAc,OAOlB,2BAAID,GACF,2BACMQ,KAAK,OACLC,MAAOT,EACPU,SAxBc,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,Y,uBCRnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAO,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAeZM,GAfY,4CAAH,sDCGPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAIpC,OACI,yBAAKc,UAAU,0CACX,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAKA,KCHJO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECFX,SAACA,GAAa,IAAD,EAEXd,mBAAS,CAC/BqB,KAAK,GACLa,SAAS,IAJwB,mBAE9BC,EAF8B,KAEvBC,EAFuB,KAqBrC,OAZAC,qBAAW,WAEPxB,EAAQC,GACHwB,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAItB,CAACpB,IAEIqB,EDAuBK,CAAa1B,GAAhCa,EAnBuB,EAmB5BN,KAAaa,EAnBe,EAmBfA,QAGpB,OAFAO,QAAQC,IAAIf,EAAQO,GAGlB,oCACE,wBAAIJ,UAAU,qCAAqChB,GAElDoB,GAAW,uBAAGJ,UAAU,oCAAb,cAEZ,yBAAKA,UAAU,aACZH,EAAOJ,KAAI,SAACC,GAAD,OACV,kBAAC,EAAD,eAAamB,IAAKnB,EAAIC,IAAQD,UE/B7BoB,EAAe,SAAC,GAAwC,IAAD,IAAtCC,sBAAsC,MAAvB,CAAC,gBAAsB,IAG5B7C,mBAAS6C,GAHmB,mBAGzDC,EAHyD,KAG7C/C,EAH6C,KAUlE,OACE,oCACE,4CAEE,kBAAC,EAAD,CAAaA,cAAeA,IAC9B,6BAEA,4BACG+C,EAAWvB,KAAI,SAACT,GAAD,OACZ,kBAAC,EAAD,CAAS6B,IAAM7B,EAAUA,SAAUA,UClB/CiC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.d6ed65a3.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( {setCategories} ) => {\r\n    \r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) =>{\r\n        setInputValue( e.target.value );\r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        //console.log('submit');\r\n\r\n        if (inputValue.trim().length>=2){\r\n            //setCategories viene desde el componente padre. Se agrega el valor del input a las categorias mediante el operador ...\r\n            setCategories( cat=>{\r\n               return [inputValue, ...cat];\r\n            });\r\n            setInputValue('');\r\n        }\r\n\r\n    }\r\n    \r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n        <p>{inputValue}</p>\r\n          <input \r\n                type=\"text\"\r\n                value={inputValue}  \r\n                onChange={ handleInputChange }\r\n           />  \r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","export const getGifs = async (category) => {\r\n    //encodeURI escapar espacios en la url\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=2t6PO3SEnum19p3UjKXCDTT2zub2Wzsc`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img =>{\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    //console.log(gifs);\r\n    return gifs;\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n\r\n    //console.log({id, title, url});\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title}/>\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nGifGridItem.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    url: PropTypes.string.isRequired\r\n}\r\n","//import React, { useState, useEffect } from 'react';\r\nimport React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n//import {getGifs} from '../helpers/getGifs'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n   // const [images, setImages] = useState([]);\r\n   \r\n\r\n    //se dispara una unica vez cuando se renderiza el componente, asi si hay cambios en el componente no ejecuta constantemente la funcion con cada cambio\r\n    //** */ useEffect( () =>{ funcion_a_ejecutar },[lista de dependencias]), si cambia la dependecia (category) se ejecuta nuevamente la funcion \r\n//     useEffect( () =>{\r\n//         getGifs(category)\r\n//             .then(setImages);\r\n//    //         .then(imgs => setImages(imgs));\r\n//     },[ category ]) \r\n\r\n   \r\n\r\n\r\n    //** */ Crear custom Hook. Permitira que cuando el comp cargue, realizar la peticion fetch e indique cuando esta cargando y cuando termino\r\n    //const state = useFetchGifs();\r\n    //console.log(state);\r\n    const {data:images, loading} = useFetchGifs(category);\r\n    console.log(images, loading);\r\n\r\n    return (\r\n      <>\r\n        <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n\r\n        {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\r\n\r\n        <div className=\"card-grid\">\r\n          {images.map((img) => (\r\n            <GifGridItem key={img.id} {...img} /> //...img envia cada propiedad de img en un objeto nuevo al componente GifGridItem\r\n          ))}\r\n        </div>\r\n\r\n      </>\r\n    );\r\n}\r\n\r\n\r\nGifGrid.propTypes = {\r\n  category: PropTypes.string.isRequired\r\n}","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\n//hook personalizado\r\nexport const useFetchGifs = (category) =>{\r\n\r\n    const [state, setState] = useState({\r\n        data:[], \r\n        loading: true\r\n    });\r\n\r\n    \r\n    \r\n    useEffect( () =>{\r\n\r\n        getGifs(category)\r\n            .then( imgs =>{\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            })\r\n\r\n    }, [category]);\r\n\r\n    return (state); //{data[], loading: true};\r\n\r\n}","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\n\r\n//funcional component... Componente en base de funciones \r\nexport const GifExpertApp = ({defautCategory=[\"Breaking Bad\"] }) => {\r\n\r\n    //const [categories, setCategories] = useState([\"Breaking Bad\"]);\r\n    const [categories, setCategories] = useState(defautCategory);\r\n\r\n  // const handleAdd = ()=>{\r\n  //     //setCategories([...categories, \"HunterXHunter\"]);\r\n  //     setCategories( (cate) => [...cate, \"HunterXHunter\"] );\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      {/* se pasa la funcion setCategories al componente para que sea ejecutda desde el */}\r\n        <AddCategory setCategories={setCategories}/>\r\n      <hr />\r\n\r\n      <ol>\r\n        {categories.map((category) =>  (\r\n            <GifGrid key= {category} category={category} />) \r\n        )}\r\n      </ol>\r\n    </>\r\n  );\r\n\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n\n\n\nReactDOM.render(\n \n    <GifExpertApp />,\n \n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}